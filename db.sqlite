CREATE TABLE payment (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	client_id INTEGER NOT NULL,
	type VARCHAR(6) NOT NULL,
	amount NUMERIC(10, 2) NOT NULL,
	frequency VARCHAR(7) NOT NULL,
	"plan" VARCHAR(50) NOT NULL,
	CONSTRAINT fk_client_payment FOREIGN KEY(client_id) REFERENCES client (id) ON DELETE CASCADE,
	CONSTRAINT payment_client_id_fkey FOREIGN KEY(client_id) REFERENCES client (id) ON DELETE CASCADE,
	CONSTRAINT payment_amount_check CHECK (amount >= (0))
);
CREATE TABLE client (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	name VARCHAR(255) NOT NULL,
	nick VARCHAR(255) NOT NULL,
	type VARCHAR(7) DEFAULT 'slack' NOT NULL,
	"plan" VARCHAR(5) DEFAULT 'free' NOT NULL,
	status VARCHAR(8) DEFAULT 'active' NOT NULL,
	notes TEXT,
	url VARCHAR(255),
	team VARCHAR(255) DEFAULT ''
);
CREATE TABLE contact (
	id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
	client_id INTEGER NOT NULL,
	name VARCHAR(255) NOT NULL,
	email VARCHAR(255) NOT NULL,
	role VARCHAR(255) DEFAULT '',
	CONSTRAINT contact_client_id_fkey FOREIGN KEY(client_id) REFERENCES client (id) ON DELETE CASCADE,
	CONSTRAINT fk_client_contact FOREIGN KEY(client_id) REFERENCES client (id) ON DELETE CASCADE,
	CONSTRAINT contact_email_key UNIQUE (email)
);
CREATE TABLE event (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    type VARCHAR(6) NOT NULL,
    body TEXT NOT NULL,
    client_id INTEGER NOT NULL,
    contact_id INTEGER DEFAULT NULL,
    CONSTRAINT event_client_id_fkey FOREIGN KEY(client_id) REFERENCES client (id),
    CONSTRAINT event_contact_id_fkey FOREIGN KEY(contact_id) REFERENCES contact (id)
);
